{"version":3,"sources":["services/persons.js","Phonebook.js","Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","newPerson","post","id","delete","put","PersonForm","addPerson","newName","handleNewName","newNumber","handleNewNumber","onSubmit","value","onChange","type","Filter","search","handleSearch","Numbers","persons","delPerson","map","x","name","toLowerCase","indexOf","person","key","NumberRow","number","onClick","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setSearch","notification","setNotification","notificationType","setNotificationType","useEffect","personService","then","response","data","updatePerson","currPerson","window","confirm","console","log","p","updateNotification","catch","error","filter","setTimeout","event","target","preventDefault","i","length","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03abaac8.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst createPerson = newPerson => {\n    return axios.post(baseUrl, newPerson)\n}\n\nconst deletePerson = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst updatePerson = (id, newPerson) => {\n    return axios.put(`${baseUrl}/${id}`, newPerson)\n}\n\nexport default {getAll, createPerson, deletePerson, updatePerson}","import React from 'react'\n\nconst PersonForm = ({ addPerson, newName, handleNewName, newNumber, handleNewNumber }) => {\n    return (\n        <div>\n            <h3>Add New</h3>\n            <form onSubmit={addPerson}>\n                <div>\n                    name: <input value={newName} onChange={handleNewName} /><br />\n                    phone: <input value={newNumber} onChange={handleNewNumber} />\n                </div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nconst Filter = ({ search, handleSearch }) => {\n    return (\n        <div>\n            <h3>Search</h3>\n            <input value={search} onChange={handleSearch} />\n        </div>\n    )\n}\n\nconst Numbers = ({ persons, search, delPerson}) => {\n    return (\n        <div>\n            <h2>Numbers</h2>\n            {persons.map(x => {\n                if (x.name.toLowerCase().indexOf(search.toLowerCase()) >= 0) {\n                    return <NumberRow person={x} key={x.id} delPerson={delPerson}/>\n                }\n            })}\n        </div>\n    )\n}\n\nconst NumberRow = ({person, delPerson}) => <div>{person.name} {person.number}<button onClick={() => delPerson(person.id)}>delete</button></div>\n\nexport { Filter, PersonForm, Numbers }","import React from 'react'\n\nconst Notification = ({message, type}) => {\n    if (message===null){\n        return null\n    }\n\n    return (\n        <div className={type}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport { Filter, PersonForm, Numbers } from './Phonebook'\nimport Notification from './Notification'\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [search, setSearch] = useState('')\n    const [notification, setNotification] = useState(null)\n    const [notificationType, setNotificationType] = useState('error')\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(response => setPersons(response.data))\n    }, [])\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        for (var i = 0; i < persons.length; i++) {\n            if (persons[i].name === newName) {\n                updatePerson(persons[i])\n                return\n            }\n        }\n\n        const newPerson = { name: newName, number: newNumber }\n        personService\n            .createPerson(newPerson)\n            .then(response => {\n                setPersons(persons.concat(response.data))\n                updateNotification(`${newName} was added to the phonebook.`, 'success')\n                setNewName('')\n                setNewNumber('')\n            })\n            .catch(error => updateNotification(error.response.data.error, 'error'))\n    }\n\n    const delPerson = (id) => {\n        if (window.confirm('Do you really want to delete this contact?')) {\n            console.log(`person ${id} deleted.`)\n            personService\n                .deletePerson(id)\n                .then(response => {\n                    setPersons(persons.filter(p => p.id !== id))\n                    updateNotification(`Person ${id} was deleted successfully.`, 'success')\n                })\n                .catch(error => updateNotification(error.response.data.error, 'error'))\n        }\n    }\n\n    const updatePerson = (currPerson) => {\n        if (window.confirm(`Name ${newName} already exists in directory. Do you want to update their number instead?`)) {\n            const newPerson = { ...currPerson, number: newNumber }\n            console.log('Person updated', newPerson)\n            personService\n                .updatePerson(newPerson.id, newPerson)\n                .then(response => {\n                    setPersons(persons.map(p => p.id !== newPerson.id ? p : newPerson))\n                    updateNotification(`Information for ${currPerson.name} was updated.`, 'success')\n                })\n                .catch(error => {\n                    updateNotification(`Person ${currPerson.name} was already removed from the server.`, 'error')\n                    setPersons(persons.filter(p => p.id !== currPerson.id))\n                })\n        }\n    }\n\n    const updateNotification = (message, type) => {\n        console.log('message:', message, 'type:', type)\n        setNotification(message)\n        setNotificationType(type)\n        setTimeout(() => setNotification(null), 5000)\n    }\n\n    const handleNewName = (event) => setNewName(event.target.value)\n\n    const handleNewNumber = (event) => setNewNumber(event.target.value)\n\n    const handleSearch = (event) => setSearch(event.target.value)\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={notification} type={notificationType} />\n            <Filter search={search} handleSearch={handleSearch} />\n            <PersonForm addPerson={addPerson} newName={newName} handleNewName={handleNewName} newNumber={newNumber} handleNewNumber={handleNewNumber} />\n            <Numbers persons={persons} search={search} delPerson={delPerson} />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}